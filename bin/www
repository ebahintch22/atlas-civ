#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var Watchdog = require('../server/watchdog');
var debug = require('debug')('atlas-rass-2017:server');
var http = require('http');

global.OPERA_DATA_BUS = [];
global.OPERA = {
   USER_BUFFER : [],
   ATTENDANCE_BUFFER : [],
   Delays : {
      notifyClient : 150000,
      adminClient  : 200000,
      sessionIdle  : 300000,
      bufferCheck  : 60000
   },
   buffer_check_timer : null,
   buffer_check_function : null
}

global.DATE_FORMATTER = (function(){
    var format_short = new global.Intl.DateTimeFormat( "fr-FR" ,
      {
         year : "numeric",
        month : "2-digit",
          day : "2-digit"
      }
    );
    var format_long = new global.Intl.DateTimeFormat( "fr-FR" , 
      {
        weekday : "long",
           year : "numeric",
          month : "2-digit",
            day : "2-digit"
      }
    );
    return {
      short: function(in_date){
        return format_short.format( in_date )
      },
      long : function(in_date){
        return format_long.format( in_date )
      }
    }
})()

OPERA.buffer_check_timer =  setInterval(Watchdog.check_buffer_func, OPERA.Delays.bufferCheck)
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
console.log(`Start listening on port ${port}`)
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}